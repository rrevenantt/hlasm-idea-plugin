package com.ftp_plugin;

import com.intellij.ide.util.PropertiesComponent;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.TransactionGuardImpl;
import com.intellij.openapi.fileEditor.FileEditorManager;
import com.intellij.openapi.fileTypes.PlainTextFileType;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowContentUiType;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.testFramework.LightVirtualFile;
import com.intellij.ui.Gray;
import com.intellij.ui.content.ContentFactory;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPFileEntryParser;
import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
import org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.stream.Collectors;

/**
 * Created by anisik on 26.07.2016.
 */
public class JesToolWindowFactory implements ToolWindowFactory {
    //    private Project localCopy;
//    private HlasmPSIFileRoot localFileRoot = null;
    private JPanel myToolWindowContent;
    private JList<String> list1;
    private JTextField textLpar;
    private JTextField textUser;
    private JPasswordField passwordField1;
    private JList<String> list2;
    private JButton refreshButton;
    //    public static AtomicBoolean pendingUpdate = new AtomicBoolean(false);
    private ListCellRenderer myRenderer = new DefaultListCellRenderer() {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            setBorder(BorderFactory.createEmptyBorder());
            return this;
        }
    };
    private ConcurrentMap<String, WeakReference<VirtualFile>> sysoutsCache = new ConcurrentHashMap<>();


    //    private MyFTPLogonSettingsComponent current;
    private FTPClient ftpClient;
    //    private ReadWriteLock lock = new ReentrantReadWriteLock(false);
    private Lock lock = new ReentrantLock();
    private String currentJobId;


    public JesToolWindowFactory() {
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myToolWindowContent = new JPanel();
        myToolWindowContent.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 8, new Insets(0, 0, 0, 0), -1, -1));
        myToolWindowContent.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Consolas", -1, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText(" LPAR IP");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textLpar = new JTextField();
        Font textLparFont = this.$$$getFont$$$("Consolas", -1, 12, textLpar.getFont());
        if (textLparFont != null) textLpar.setFont(textLparFont);
        panel1.add(textLpar, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textUser = new JTextField();
        Font textUserFont = this.$$$getFont$$$("Consolas", -1, 12, textUser.getFont());
        if (textUserFont != null) textUser.setFont(textUserFont);
        panel1.add(textUser, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("Consolas", -1, -1, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("User");
        panel1.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$("Consolas", -1, -1, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Password");
        panel1.add(label3, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordField1 = new JPasswordField();
        Font passwordField1Font = this.$$$getFont$$$("Consolas", -1, 12, passwordField1.getFont());
        if (passwordField1Font != null) passwordField1.setFont(passwordField1Font);
        passwordField1.setText("");
        panel1.add(passwordField1, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        refreshButton = new JButton();
        refreshButton.setFocusable(false);
        Font refreshButtonFont = this.$$$getFont$$$("Consolas", -1, -1, refreshButton.getFont());
        if (refreshButtonFont != null) refreshButton.setFont(refreshButtonFont);
        refreshButton.setText("Refresh");
        panel1.add(refreshButton, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        myToolWindowContent.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list1 = new JList();
        list1.setEnabled(true);
        Font list1Font = this.$$$getFont$$$("Consolas", -1, 12, list1.getFont());
        if (list1Font != null) list1.setFont(list1Font);
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        list1.setModel(defaultListModel1);
        list1.setSelectionMode(0);
        scrollPane1.setViewportView(list1);
        final JScrollPane scrollPane2 = new JScrollPane();
        myToolWindowContent.add(scrollPane2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list2 = new JList();
        Font list2Font = this.$$$getFont$$$("Consolas", -1, 12, list2.getFont());
        if (list2Font != null) list2.setFont(list2Font);
        list2.setSelectionMode(0);
        scrollPane2.setViewportView(list2);
        label2.setLabelFor(textUser);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myToolWindowContent;
    }


    public class FTPUpdater extends SwingWorker<Void, Void> {
        FTPUpdater() {

        }

        private String[] jobList = {""};

        @Override
        protected Void doInBackground() throws Exception {

            lock.lock();
            ftpClient.setParserFactory(new DefaultFTPFileEntryParserFactory() {
                @Override
                public FTPFileEntryParser createFileEntryParser(String key) {
                    if (key.equals("MyParser")) {
                        return new FTPFileEntryParserImpl() {
                            @Override
                            public FTPFile parseFTPEntry(String s) {
                                System.out.println(s);
                                FTPFile f = new FTPFile();
                                f.setRawListing(s);
                                return f;
                            }
                        };
                    }
                    return super.createFileEntryParser(key);
                }
            });

            FTPFile[] files = ftpClient.initiateListParsing("MyParser", "").getFiles();
            lock.unlock();

            Collection<String> result = Arrays.stream(files).skip(1)
                    .map(FTPFile::getRawListing)
                    .collect(Collectors.toList());

            jobList = result.toArray(jobList);


            return null;
        }

        @Override
        protected void done() {
            refreshButton.setEnabled(true);
            refreshButton.setText("Refresh");
            list1.setListData(jobList);
            list1.updateUI();
        }

    }

    ///
    @Override
    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {

        PropertiesComponent properties = PropertiesComponent.getInstance(project);
        textLpar.setText(properties.getValue("FTPHost", ""));
        passwordField1.setText(properties.getValue("FTPPassword", ""));
        textUser.setText(properties.getValue("FTPUser", ""));
        refreshButton.addActionListener(e -> {
            System.out.println(textLpar.getText() + textUser.getText() + passwordField1.getText());

//            current = (MyFTPLogonSettingsComponent) project.getComponent("MyFTPLogonSettingsComponent");
            refreshButton.setEnabled(false);
            refreshButton.setText("Updating..");
            refreshButton.updateUI();

            if (!(properties.getValue("FTPHost", "").equals(textLpar.getText())
                    && properties.getValue("FTPPassword", "").equals(passwordField1.getText())
                    && properties.getValue("FTPUser", "").equals(textUser.getText()))
                    || ftpClient == null || !ftpClient.isConnected()) {
                properties.setValue("FTPHost", textLpar.getText());
                properties.setValue("FTPUser", textUser.getText());
                properties.setValue("FTPPassword", passwordField1.getText());
//                current.setPort("21");
                lock.lock();
                try {
                    if (ftpClient != null && ftpClient.isConnected())
                        ftpClient.disconnect();
                    ftpClient = FTPServiceProvider.createJESFTPClient(null,
                            new LogonSettingsComponent(properties.getValue("FTPHost", "")
                                    , properties.getValue("FTPPassword", "")
                                    , properties.getValue("FTPUser", ""), "21"));

                } catch (IOException e1) {

                }
                lock.unlock();
            }
            FTPUpdater worker = new FTPUpdater();
//                pendingUpdate.compareAndSet(false,true)
            worker.execute();


        });
        list1.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Gray._50), "Jobs"),
                BorderFactory.createEtchedBorder(EtchedBorder.LOWERED)));
        list2.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Gray._50), "Sysouts"),
                BorderFactory.createEtchedBorder(EtchedBorder.LOWERED)));

        list2.setCellRenderer(myRenderer);
        list1.setCellRenderer(myRenderer);
        String[] data = new String[0];
        list1.setListData(data);

//        list1.addListSelectionListener(e -> {
        list1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {

                String jobInfo = list1.getModel().getElementAt(list1.locationToIndex(e.getPoint()));
                String jobID = jobInfo.split("\\s+")[1];

                new SwingWorker<Void, Void>() {

                    private String[] listData = new String[0];

                    @Override
                    protected Void doInBackground() throws Exception {

                        lock.lock();
                        try {
                            if (!ftpClient.isConnected())
                                ftpClient = FTPServiceProvider.createJESFTPClient(null,
                                        new LogonSettingsComponent(properties.getValue("FTPHost", "")
                                                , properties.getValue("FTPPassword", "")
                                                , properties.getValue("FTPUser", ""), "21"));
                            FTPFile[] files = ftpClient.initiateListParsing("MyParser", jobID).getFiles();
                            listData = Arrays.stream(files) //.skip(1)
                                    .map(FTPFile::getRawListing)
                                    .collect(Collectors.toList()).toArray(new String[0]);

                        } catch (IOException e1) {

                        }

                        lock.unlock();
                        return null;
                    }

                    @Override
                    protected void done() {
                        currentJobId = jobID;
                        list2.setListData(listData);
                    }
                }.execute();
            }
        });
        list2.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() >= 2) {
                    int clickedIntex = list2.locationToIndex(e.getPoint());
                    if (clickedIntex <= 3 || clickedIntex >= list2.getModel().getSize() - 1)
                        return;

//                    TempFileSystem.getInstance();
                    String fileName = currentJobId + "." + (clickedIntex - 3);

                    VirtualFile cachedSysout = null;

                    if (sysoutsCache.get(fileName) != null) {
                        cachedSysout = sysoutsCache.get(fileName).get();
                    }
                    if (cachedSysout == null) {

                        VirtualFile sysout = new LightVirtualFile(fileName, PlainTextFileType.INSTANCE, "");
                        sysoutsCache.put(fileName, new WeakReference<>(sysout));
                        cachedSysout = sysout;

//                    Thread thread = new Thread(() -> {

                        TransactionGuardImpl.getInstance().submitTransactionAndWait(() -> {
                            ApplicationManager.getApplication().runWriteAction(() -> {
                                lock.lock();


                                try {
                                    OutputStream out = sysout.getOutputStream(null);
//                                BufferedReader in = new BufferedReader( new InputStreamReader(ftpClient.retrieveFileStream(currentJobId + "." + (clickedIntex - 3))));
                                    InputStream in = ftpClient.retrieveFileStream(fileName);
                                    byte[] buffer = new byte[1024];
                                    while (true) {
                                        int readed = in.read(buffer, 0, buffer.length);
                                        if (readed < 0)
                                            break;
                                        out.write(buffer, 0, readed);
                                    }
                                    in.close();
                                    out.close();
                                    ftpClient.completePendingCommand();
                                } catch (IOException e1) {

                                }
                                sysout.refresh(true, false);

                                lock.unlock();
                            });
                        });
                    }


//                    });
//                    thread.start();
                    FileEditorManager.getInstance(project).openFile(cachedSysout, true, true);

                }

            }
        });


        toolWindow.setTitle("JES");
        toolWindow.setContentUiType(ToolWindowContentUiType.TABBED, null);
        toolWindow.getContentManager().addContent(
                ContentFactory.SERVICE.getInstance().createContent(myToolWindowContent, "", true));

       /* Class a = new GroovyClassLoader().parseClass("adf");
        Class b = HexStringDumpMapper.class;
        ExpandoMetaClass emc = new ExpandoMetaClass(b, false, true);
        try {
            GroovyObject aObj = (GroovyObject) a.newInstance();
            //    aObj.
        } catch (InstantiationException | IllegalAccessException e) {
        }*/


    }

//    @State(name = "MyFTPLogonSettingsComponent", storages = @Storage(id = "FTPLogonSettings", value = "FTPLogonSettings.xml"))
//    public class MyFTPLogonSettingsComponent extends LogonSettingsComponent {
//
//    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

}
